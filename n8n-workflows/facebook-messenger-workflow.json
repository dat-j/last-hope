{
  "nodes": [
    {
      "parameters": {
        "multipleMethods": true,
        "path": "webhook-messenger",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "86c41843-ad8d-4668-ba90-9249d122e206",
      "name": "Facebook Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        1260,
        -520
      ],
      "webhookId": "facebook-messenger-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.body.object }}",
              "rightValue": "page",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "f9ab5a0f-51ef-4d2a-aa8e-8eb2053ff5c3",
      "name": "Check if Page Event",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1600,
        -520
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.hasValidMessage }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "filter-valid-messages",
      "name": "Filter Valid Messages",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2040,
        -520
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://lamp-practices-bibliography-annie.trycloudflare.com/api/chat/message",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"facebookUserId\": \"{{ $json.facebookUserId }}\",\n    \"message\": \"{{ $json.message }}\",\n    \"workflowId\": \"f633fd10-061a-43e2-894a-f27a51b42d73\"\n}",
        "options": {}
      },
      "id": "923fa97f-89c9-4fbc-9486-d12faa82127c",
      "name": "Call Backend API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2260,
        -520
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare Facebook Send API request\nconst backendResponse = $input.first().json;\nconst facebookUserId = $('Extract Message Data').first().json.facebookUserId;\n\nlet messageData = {\n  recipient: {\n    id: facebookUserId\n  },\n  message: {\n    text: backendResponse.message\n  }\n};\n\n// Add buttons if available\nif (backendResponse.messageType === 'button' && backendResponse.buttons) {\n  messageData.message = {\n    attachment: {\n      type: 'template',\n      payload: {\n        template_type: 'button',\n        text: backendResponse.message,\n        buttons: backendResponse.buttons.map(button => ({\n          type: 'postback',\n          title: button.title,\n          payload: button.payload\n        }))\n      }\n    }\n  };\n}\n\nreturn messageData;"
      },
      "id": "fed30838-97f4-4d37-afd4-bfd496d3c44f",
      "name": "Prepare Facebook Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2480,
        -520
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://graph.facebook.com/v22.0/{{ $('Facebook Webhook').item.json.body.entry[0].messaging[0].recipient.id }}/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ $vars.FACEBOOK_PAGE_ACCESS_TOKEN }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"recipient\":{\n    \"id\":\"{{ $('Facebook Webhook').item.json.body.entry[0].messaging[0].sender.id }}\"\n  },\n  \"message\":{{ JSON.stringify($json.message) }}\n}",
        "options": {}
      },
      "id": "18c8a1bf-245c-4305-846e-8f643c0804fc",
      "name": "Send to Facebook",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2700,
        -520
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract message data from Facebook webhook\nconst messaging = $input.first().json.body.entry[0].messaging[0]\n\n// Check for actual messages (text or quick replies)\nif (messaging.message && (messaging.message.text || messaging.message.quick_reply)) {\n  const senderId = messaging.sender.id;\n  const messageText = messaging.message.text || messaging.message.quick_reply.payload;\n  const timestamp = messaging.timestamp;\n  \n  return {\n    facebookUserId: senderId,\n    message: messageText,\n    timestamp: timestamp,\n    type: 'message',\n    hasValidMessage: true\n  };\n} \n// Check for postback events\nelse if (messaging.postback) {\n  const senderId = messaging.sender.id;\n  const payload = messaging.postback.payload;\n  const timestamp = messaging.timestamp;\n  \n  return {\n    facebookUserId: senderId,\n    message: payload,\n    timestamp: timestamp,\n    type: 'postback',\n    hasValidMessage: true\n  };\n}\n\n// Filter out read receipts, delivery confirmations, and other non-message events\nreturn {\n  hasValidMessage: false,\n  eventType: messaging.read ? 'read' : \n           messaging.delivery ? 'delivery' : \n           messaging.message && messaging.message.attachments ? 'attachment' :\n           'unknown',\n  skipped: true\n};"
      },
      "id": "00ed64c2-db88-42ea-bb83-cf1243ae2822",
      "name": "Extract Message Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1820,
        -520
      ]
    },
    {
      "parameters": {
        "respondWith": "noData",
        "options": {
          "responseCode": 200
        }
      },
      "id": "c2ea7537-4c40-4203-9779-d35923bd7b3f",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2920,
        -520
      ]
    },
    {
      "parameters": {
        "respondWith": "noData",
        "options": {
          "responseCode": 200
        }
      },
      "id": "skip-response",
      "name": "Skip Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2040,
        -320
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "Invalid request",
        "options": {}
      },
      "id": "ba0008be-e9c2-4439-9cda-a0240ec87dcc",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1600,
        -320
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ebc4637a-c5c8-43c5-963c-19f716f0649b",
              "name": "query['hub.challenge']",
              "value": "={{ $json.query['hub.challenge'] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1500,
        -740
      ],
      "id": "4a84c461-9de8-4233-acbd-34f8a4f20404",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.query['hub.challenge'] }}",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        1720,
        -760
      ],
      "id": "89cd7ecf-2e7c-42e6-8aa9-65c80e998f33",
      "name": "Webhook Verification Response"
    }
  ],
  "connections": {
    "Facebook Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check if Page Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Page Event": {
      "main": [
        [
          {
            "node": "Extract Message Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Valid Messages": {
      "main": [
        [
          {
            "node": "Call Backend API",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Skip Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Backend API": {
      "main": [
        [
          {
            "node": "Prepare Facebook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Facebook Response": {
      "main": [
        [
          {
            "node": "Send to Facebook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to Facebook": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Message Data": {
      "main": [
        [
          {
            "node": "Filter Valid Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Webhook Verification Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b1622dfe52009fcd41868aabd53ddedf0e74c5d51caf143ad80f56afe86a4a91"
  }
} 